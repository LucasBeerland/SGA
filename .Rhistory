setwd("~/Dropbox/statOmics/SGA")
setwd("~/Dropbox/thuis/biodanza/monografieën/mijnMonografie")
setwd("~/Dropbox/thuis/biodanza/monografieën/mijnMonografie")
setwd("~/Dropbox/statOmics/SGA")
?aggregateFeatures
?aggregateFeatures
setwd("~/Downloads/SGA2023")
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
?aggregateFeatures
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "~/Downloads/PDA-data 5/quantification/cancer/peptides3vs3.txt"
ecols <- grep(
"Intensity\\.",
names(read.delim(peptidesFile))
)
ecols
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
pe
names(pe)
pe[["peptideRaw"]]
colnames(pe[["peptideRaw"]])
(newNames <-  sub(
pattern = "Intensity\\.",
replacement = "",
colnames(pe[["peptideRaw"]]))
)
pe <- renameColname(pe,
i = "peptideRaw",
newNames)
pe <- renamePrimary(pe, newNames)
colnames(pe[["peptideRaw"]])
colData(pe)$condition <-
colnames(pe[["peptideRaw"]]) %>%
substr(start = 1, stop = 2) %>%
as.factor
colData(pe)$condition
pe[["peptideRaw"]] %>% rowData %>% names()
pe[["peptideRaw"]] |> rowData |> names()
pe[["peptideRaw"]] %>% rowData %>% names()
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
pe[["peptideRaw"]] %>%
rowData %>%
names()
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe <- filterFeatures(pe, ~ Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins))
pe[["peptideRaw"]] %>% rowData %>% names()
pe[[1]]
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Potential.contaminant != "+")
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Contaminant != "+")
pe[[1]]
pe <- filterFeatures(pe,~ nNonZero >=2)
nrow(pe[["peptideLog"]])
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median")
pe[["peptideNorm"]] %>%
assay %>%
as.data.frame() %>%
gather(sample, intensity) %>%
mutate(condition = colData(pe)[sample,"condition"]) %>%
ggplot(aes(x = intensity,group = sample,color = condition)) +
geom_density()
pe[["peptideNorm"]] %>%
assay %>%
limma::plotMDS(col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "protein", fun = matrixStats::colMedians)
plotMDS(assay(pe[["protein"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "protein", formula = ~condition)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
library(ExploreModelMatrix)
VisualizeDesign(colData(pe),~condition)$plotlist
L <- makeContrast("conditionPD=0", parameterNames = c("conditionPD"))
pe <- hypothesisTest(object = pe, i = "protein", contrast = L)
volcano <- ggplot(rowData(pe[["protein"]])$conditionPD,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
?msqrob
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "~/Downloads/PDA-data 5/quantification/cancer/peptides6vs6.txt"
ecols <- grep(
"Intensity\\.",
names(read.delim(peptidesFile))
)
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
colnames(pe[["peptideRaw"]])
(newNames <-  sub(
pattern = "Intensity\\.",
replacement = "",
colnames(pe[["peptideRaw"]]))
)
pe <- renameColname(pe,
i = "peptideRaw",
newNames)
pe <- renamePrimary(pe, newNames)
colnames(pe[["peptideRaw"]])
colData(pe)$condition <-
colnames(pe[["peptideRaw"]]) %>%
substr(start = 1, stop = 2) %>%
as.factor
colData(pe)$condition
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
pe[["peptideRaw"]] %>%
rowData %>%
names()
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe <- filterFeatures(pe, ~ Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins))
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Contaminant != "+")
pe <- filterFeatures(pe,~ nNonZero >=2)
nrow(pe[["peptideLog"]])
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median")
pe[["peptideNorm"]] %>%
assay %>%
as.data.frame() %>%
gather(sample, intensity) %>%
mutate(condition = colData(pe)[sample,"condition"]) %>%
ggplot(aes(x = intensity,group = sample,color = condition)) +
geom_density()
pe[["peptideNorm"]] %>%
assay %>%
limma::plotMDS(col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "protein", fun = matrixStats::colMedians)
plotMDS(assay(pe[["protein"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "protein", formula = ~condition)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
library(ExploreModelMatrix)
VisualizeDesign(colData(pe),~condition)$plotlist
L <- makeContrast("conditionPD=0", parameterNames = c("conditionPD"))
pe <- hypothesisTest(object = pe, i = "protein", contrast = L)
volcano <- ggplot(rowData(pe[["protein"]])$conditionPD,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
sigNames <- rowData(pe[["protein"]])$conditionPD %>%
rownames_to_column("protein") %>%
filter(adjPval<0.05) %>%
pull(protein)
heatmap(assay(pe[["protein"]])[sigNames, ])
rowData(pe[["protein"]])$conditionPD %>%
rownames_to_column(var = "protein") %>%
ggplot(aes(x=grepl("UPS",protein),y=logFC)) +
geom_boxplot() +
xlab("UPS") +
geom_segment(
x = 1.5,
xend = 2.5,
y = log2(0.74/0.25),
yend = log2(0.74/0.25),
colour="red") +
geom_segment(
x = 0.5,
xend = 1.5,
y = 0,
yend = 0,
colour="red") +
annotate(
"text",
x = c(1,2),
y = c(0,log2(0.74/0.25))+.1,
label = c(
"log2 FC Ecoli = 0",
paste0("log2 FC UPS = ",round(log2(0.74/0.25),2))
),
colour = "red")
for (protName in sigNames)
{
pePlot <- pe[protName, , c("peptideNorm","protein")]
pePlotDf <- data.frame(longFormat(pePlot))
pePlotDf$assay <- factor(pePlotDf$assay,
levels = c("peptideNorm", "protein"))
pePlotDf$condition <- as.factor(colData(pePlot)[pePlotDf$colname, "condition"])
# plotting
p1 <- ggplot(data = pePlotDf,
aes(x = colname, y = value, group = rowname)) +
geom_line() +
geom_point() +
theme(axis.text.x = element_text(angle = 70, hjust = 1, vjust = 0.5)) +
facet_grid(~assay) +
ggtitle(protName)
print(p1)
# plotting 2
p2 <- ggplot(pePlotDf, aes(x = colname, y = value, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(
position = position_jitter(width = .1),
aes(shape = rowname)) +
scale_shape_manual(values = 1:nrow(pePlotDf)) +
labs(title = protName, x = "sample", y = "peptide intensity (log2)") +
theme(axis.text.x = element_text(angle = 70, hjust = 1, vjust = 0.5)) +
facet_grid(~assay)
print(p2)
}
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "~/Downloads/PDA-data 5/quantification/cancer/peptides9vs9.txt"
ecols <- grep(
"Intensity\\.",
names(read.delim(peptidesFile))
)
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
colnames(pe[["peptideRaw"]])
(newNames <-  sub(
pattern = "Intensity\\.",
replacement = "",
colnames(pe[["peptideRaw"]]))
)
pe <- renameColname(pe,
i = "peptideRaw",
newNames)
pe <- renamePrimary(pe, newNames)
colnames(pe[["peptideRaw"]])
colData(pe)$condition <-
colnames(pe[["peptideRaw"]]) %>%
substr(start = 1, stop = 2) %>%
as.factor
colData(pe)$condition
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
pe[["peptideRaw"]] %>%
rowData %>%
names()
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe <- filterFeatures(pe, ~ Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins))
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Contaminant != "+")
pe <- filterFeatures(pe,~ nNonZero >=2)
nrow(pe[["peptideLog"]])
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median")
pe[["peptideNorm"]] %>%
assay %>%
as.data.frame() %>%
gather(sample, intensity) %>%
mutate(condition = colData(pe)[sample,"condition"]) %>%
ggplot(aes(x = intensity,group = sample,color = condition)) +
geom_density()
pe[["peptideNorm"]] %>%
assay %>%
limma::plotMDS(col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "protein", fun = matrixStats::colMedians)
plotMDS(assay(pe[["protein"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "protein", formula = ~condition)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
library(ExploreModelMatrix)
VisualizeDesign(colData(pe),~condition)$plotlist
L <- makeContrast("conditionPD=0", parameterNames = c("conditionPD"))
pe <- hypothesisTest(object = pe, i = "protein", contrast = L)
volcano <- ggplot(rowData(pe[["protein"]])$conditionPD,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
sigNames <- rowData(pe[["protein"]])$conditionPD %>%
rownames_to_column("protein") %>%
filter(adjPval<0.05) %>%
pull(protein)
heatmap(assay(pe[["protein"]])[sigNames, ])
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "~/Downloads/PDA-data 5/quantification/cancer/peptides6vs6.txt"
ecols <- grep(
"Intensity\\.",
names(read.delim(peptidesFile))
)
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
colnames(pe[["peptideRaw"]])
(newNames <-  sub(
pattern = "Intensity\\.",
replacement = "",
colnames(pe[["peptideRaw"]]))
)
pe <- renameColname(pe,
i = "peptideRaw",
newNames)
pe <- renamePrimary(pe, newNames)
colnames(pe[["peptideRaw"]])
colData(pe)$condition <-
colnames(pe[["peptideRaw"]]) %>%
substr(start = 1, stop = 2) %>%
as.factor
colData(pe)$condition
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
pe[["peptideRaw"]] %>%
rowData %>%
names()
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe <- filterFeatures(pe, ~ Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins))
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Contaminant != "+")
pe <- filterFeatures(pe,~ nNonZero >=2)
nrow(pe[["peptideLog"]])
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median")
pe[["peptideNorm"]] %>%
assay %>%
as.data.frame() %>%
gather(sample, intensity) %>%
mutate(condition = colData(pe)[sample,"condition"]) %>%
ggplot(aes(x = intensity,group = sample,color = condition)) +
geom_density()
pe[["peptideNorm"]] %>%
assay %>%
limma::plotMDS(col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "protein", fun = matrixStats::colMedians)
plotMDS(assay(pe[["protein"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "protein", formula = ~condition)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
library(ExploreModelMatrix)
VisualizeDesign(colData(pe),~condition)$plotlist
L <- makeContrast("conditionPD=0", parameterNames = c("conditionPD"))
pe <- hypothesisTest(object = pe, i = "protein", contrast = L)
volcano <- ggplot(rowData(pe[["protein"]])$conditionPD,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
sigNames <- rowData(pe[["protein"]])$conditionPD %>%
rownames_to_column("protein") %>%
filter(adjPval<0.05) %>%
pull(protein)
heatmap(assay(pe[["protein"]])[sigNames, ])
library(tidyverse)
library(limma)
library(QFeatures)
library(msqrob2)
library(plotly)
peptidesFile <- "~/Downloads/PDA-data 5/quantification/cancer/peptides3vs3.txt"
ecols <- grep(
"Intensity\\.",
names(read.delim(peptidesFile))
)
pe <- readQFeatures(
table = peptidesFile,
fnames = 1,
ecol = ecols,
name = "peptideRaw", sep="\t")
colnames(pe[["peptideRaw"]])
(newNames <-  sub(
pattern = "Intensity\\.",
replacement = "",
colnames(pe[["peptideRaw"]]))
)
pe <- renameColname(pe,
i = "peptideRaw",
newNames)
pe <- renamePrimary(pe, newNames)
colnames(pe[["peptideRaw"]])
colData(pe)$condition <-
colnames(pe[["peptideRaw"]]) %>%
substr(start = 1, stop = 2) %>%
as.factor
colData(pe)$condition
rowData(pe[["peptideRaw"]])$nNonZero <- rowSums(assay(pe[["peptideRaw"]]) > 0)
pe <- zeroIsNA(pe, "peptideRaw") # convert 0 to NA
pe[["peptideRaw"]] %>%
rowData %>%
names()
pe <- logTransform(pe, base = 2, i = "peptideRaw", name = "peptideLog")
pe <- filterFeatures(pe, ~ Proteins %in% smallestUniqueGroups(rowData(pe[["peptideLog"]])$Proteins))
pe <- filterFeatures(pe,~Reverse != "+")
pe <- filterFeatures(pe,~ Contaminant != "+")
pe <- filterFeatures(pe,~ nNonZero >=2)
nrow(pe[["peptideLog"]])
pe <- normalize(pe,
i = "peptideLog",
name = "peptideNorm",
method = "center.median")
pe[["peptideNorm"]] %>%
assay %>%
as.data.frame() %>%
gather(sample, intensity) %>%
mutate(condition = colData(pe)[sample,"condition"]) %>%
ggplot(aes(x = intensity,group = sample,color = condition)) +
geom_density()
pe[["peptideNorm"]] %>%
assay %>%
limma::plotMDS(col = as.numeric(colData(pe)$condition))
pe <- aggregateFeatures(pe,
i = "peptideNorm",
fcol = "Proteins",
na.rm = TRUE,
name = "protein", fun = matrixStats::colMedians)
plotMDS(assay(pe[["protein"]]), col = as.numeric(colData(pe)$condition))
pe <- msqrob(object = pe, i = "protein", formula = ~condition)
getCoef(rowData(pe[["protein"]])$msqrobModels[[1]])
library(ExploreModelMatrix)
VisualizeDesign(colData(pe),~condition)$plotlist
L <- makeContrast("conditionPD=0", parameterNames = c("conditionPD"))
pe <- hypothesisTest(object = pe, i = "protein", contrast = L)
volcano <- ggplot(rowData(pe[["protein"]])$conditionPD,
aes(x = logFC, y = -log10(pval), color = adjPval < 0.05)) +
geom_point(cex = 2.5) +
scale_color_manual(values = alpha(c("black", "red"), 0.5)) + theme_minimal()
volcano
