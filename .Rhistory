theme(legend.position = NULL)
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = FALSE)
?thene
?theme
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(colData(se)$treatment:colData(se)$time, colSums(assays(se)$counts)/1e6,geom="boxplot")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(
treatment:time,
colSums(assays(se)$counts)/1e6,
geom="boxplot",
colData(patient)
) +
xlab("treatment")+
ylab("libsize (million reads)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(
treatment:time,
colSums(assays(se)$counts)/1e6,
geom="boxplot",
data=colData(patient)
) +
xlab("treatment")+
ylab("libsize (million reads)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(
treatment:time,
colSums(assays(se)$counts)/1e6,
geom="boxplot",
data=colData(se)
) +
xlab("treatment")+
ylab("libsize (million reads)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
colData(se) %>%
as.data.frame() %>%
qplot(
treatment:time,
colSums(assays(se)$counts)/1e6,
geom="boxplot",
) +
xlab("treatment")+
ylab("libsize (million reads)")
qplot(colSums(assays(se)$counts)/1e6, geom="histogram", bins=10,col="black") +
theme(legend.position = "none") +
xlab("libsize (million reads)")
qplot(
colData(se)$treatment:colData(se)$time,
colSums(assays(se)$counts)/1e6,geom="boxplot"
) +
xlab("treatment")+
ylab("libsize (million reads)")
qplot(
colData(se)$patient,
colSums(assays(se)$counts)/1e6,geom="boxplot"
) +
xlab("Patient")+
ylab("libsize (million reads)")
?plotMA()
plotMA(counts(se)[,1:2])
plotMA(assay(se)$counts[,1:2])
assay(se)$counts[,1:2]
assay(se)
assay(se)[,1:@]
assay(se)[,1:2]
plotMA(assay(se)[,1:2])
limma::plotMA(assay(se)[,1:2])
?limma::plotMA
limma::plotMA(assay(se)[,1:2])
?stop
?stopifnot
colData(se)$treatment
colData(se)$time
ma2Samp <- function(countMx)
{
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 0)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
ma2Samp <- function(countMx) {
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 0)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
?function
?function()
help("function")
ma2Samp <- function(countMx) {4}
ma2Samp <- function(countMx) {
#stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 0)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
ma2Samp <- function(countMx) {
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 0)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
}
maPlots <- combn(
ids,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
ids <- colData(se)$treatment =="Control" & colData(se)$time == "48h"
ids
colSums(assays(se)$counts[,ids]) / 1e6
ids <- which(colData(se)$treatment =="Control" & colData(se)$time == "48h")
ids
colSums(assays(se)$counts[,ids]) / 1e6
maPlots <- combn(
ids,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
maPlots <- combn(
1:2,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
maPlots <- combn(
ids,
m=2,
FUN=function(x) sum(x)
)
maPlots
maPlots <- combn(
ids,
m=2,
FUN=function(x) x
)
maPlot()
maPlots
maPlots <- combn(
ids,
m=2,
FUN=function(x) assay(se)[,x]
)
maPlots
maPlots %>% dim
maPlots[,,1]
ma2Samp(maPlots[,,1])
maPlots
maPlots[,,2]%>% dim()
maPlots[,,2]%>% nrow()
ma2Samp <- function(countMx) {
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 2)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
}
maPlots <- combn(
ids,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
maPlots <- combn(
1:2,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
maPlots[[1]]
ma2Samp <- function(countMx) {
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 2)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
MAplot <- qplot(A, M, col=w) +
theme(legend.position = "none") +
scale_color_manual(values = c("black","orange")) +
xlab("A: log2 Average") +
ylab("M: log2 Fold Change")
MAplot +
geom_abline(intercept=0,slope=0)
}
maPlots <- combn(
1:2,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
dim(se)
dim(colData(se))
maPlots <- combn(
1:3,
m=2,
FUN=function(x) ma2Samp(assay(se)[,x])
)
maPlots[[1]]
maPlots[[2]]
pairComb <- combn(
ids,
m=2)
pairComb
lapply(pairComb,2,function(x) ma2Samp(assay(se)[,x]))
plots <- apply(pairComb,2,function(x) ma2Samp(assay(se)[,x]))
plots[[1]]
pairComb <- combn(
ids,
m=2)
plots <- apply(pairComb,2,function(x) ma2Samp(assay(se)[,x]) + ggtitle(paste("samples",x[1],x[2])))
plots[[1]]
ma2Samp <- function(countMx) {
stopifnot("`countMx` is not a matrix with two columns" = ncol(countMx) == 2)
A <- countMx %>% log2 %>% rowMeans
M <- countMx %>% log2 %>% apply(.,1,diff)
w <- countMx[,1]==min(countMx[,1]) | countMx[,2]==min(countMx[,2])
if (any(w)) {
A[w] <- runif(sum(w), min = -1, max = .1)
M[w] <- log2(countMx[w,2] + 1) - log2(countMx[w,1] + 1)
}
MAplot <- qplot(A, M, col=w) +
theme(legend.position = "none") +
scale_color_manual(values = c("black","orange")) +
xlab("A: log2 Average") +
ylab("M: log2 Fold Change")
MAplot +
geom_abline(intercept=0,slope=0,col="red")
}
pairComb <- combn(
ids,
m=2)
plots <- apply(pairComb,2,function(x) ma2Samp(assay(se)[,x]) + ggtitle(paste("samples",x[2],"vs", x[1])))
gridExtra::grid.arrange(plots,ncol=2)
?gList
do.call("gridExtra::grid.arrange",c(plots,ncol=2))
library(gridExtra)
do.call("grid.arrange",c(plots,ncol=2))
do.call("grid.arrange",c(plots,ncol=2))
?grid.arrange
do.call("grid.arrange",c(plots,ncol=3))
knitr::include_graphics("edgeRNormIntro.png")
knitr::include_graphics("./figs/edgeRNormIntro.png")
dge <- edgeR::calcNormFactors(se)
dge$samples #normalization factors added to colData
## normalize
effLibSize <- dge$samples$lib.size * dge$samples$norm.factors
normCountTMM <- sweep(assays(se)$counts, 2, FUN="/", effLibSize)
plotsNorm <- apply(pairComb,2,function(x) ma2Samp(normCountTMM[,x]) + ggtitle(paste("samples",x[2],"vs", x[1])))
do.call("grid.arrange",c(plots,ncol=3))
dds <- DESeq2::DESeqDataSetFromMatrix(countData = assays(se)$counts,
colData = colData(se),
design = ~ 1) #just add intercept to showcase normalization
dds <- DESeq2::estimateSizeFactors(dds)
sizeFactors(dds)
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
plot(betasTrue,ylab=expression(beta),ylim=c(0,4),pch=19,type="b")
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
dataframe(betasTrue=betasTrue) %>%
ggplot(aes(y=betasTrue)) +
geom_point() +
geom_line() +
ylab(beta,parse=TRUE) +
ylim(0,4)
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(betasTrue=betasTrue) %>%
ggplot(aes(y=betasTrue)) +
geom_point() +
geom_line() +
ylab("beta",parse=TRUE) +
ylim(0,4)
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(betasTrue=betasTrue) %>%
ggplot(aes(y=betasTrue)) +
geom_point() +
geom_line() +
ylab("beta") +
ylim(0,4)
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(coef =0:2,betasTrue=betasTrue) %>%
ggplot(aes(x=coef,y=betasTrue)) +
geom_point() +
geom_line() +
ylab("beta") +
ylim(0,4)
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(coef =0:2,betasTrue=betasTrue) %>%
ggplot(aes(x=coef,y=betasTrue)) +
geom_point() +
geom_line() +
ylab("beta") +
ylim(0,4) +
theme_bw()
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(coef =0:2,betasTrue=betasTrue) %>%
ggplot(aes(x=coef,y=betasTrue)) +
geom_point() +
geom_line() +
ylab("parameter value") +
xlab("beta") +
ylim(0,4) +
theme_bw()
set.seed(300)
xhlp<-cbind(1,rnorm(100),rnorm(100))
betasTrue<-c(2,0.8,1.2)
etaTrue<-xhlp%*%betasTrue
y<-rpois(100,exp(etaTrue))
data.frame(coef =0:2,betasTrue=betasTrue) %>%
ggplot(aes(x=coef,y=betasTrue)) +
geom_point() +
geom_line() +
ylab("parameter value") +
xlab("beta") +
ylim(0,4) +
theme_bw() +
scale_x_continuous(breaks=c(0,1,2))
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
library(plotly)
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, size = I(2)) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, size = I(5)) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, size = I(5),pch=1) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, size = .2) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, marker=list(sizeref=2)) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y, marker=list(sizeref=20)) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
p1 <- plot_ly(
x = ~xhlp[,2],
y = ~xhlp[,3],
z= ~y,
mode="markers",
size=.5) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
x1 <- xhlp[,2]
x2 <- xhlp[,3]
p1 <- plot_ly(
x = ~x1,
y = ~x2,
z= ~y,
mode="markers",
size=.5) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
x1 <- xhlp[,2]
x2 <- xhlp[,3]
p1 <- plot_ly(
x = ~x1,
y = ~x2,
z= ~ log2(y+.5),
mode="markers",
size=.5) %>%
add_markers(type="scatter3d") %>%
layout(
scene = list(
aspectmode="cube",
xaxis = list(range=range(xhlp[,2]))), yaxis = list(range=range(xhlp[,3])), zaxis = list(range=range(y))
)
p1
dpois(y,etaTrue) %>%
log %>%
sum()
etaTrue
dpois(y,exp(etaTrue))
